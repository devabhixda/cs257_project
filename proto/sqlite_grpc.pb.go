// proto/sqlite.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: proto/sqlite.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DistributedSqlite_ExecuteWrite_FullMethodName = "/proto.DistributedSqlite/ExecuteWrite"
	DistributedSqlite_ExecuteRead_FullMethodName  = "/proto.DistributedSqlite/ExecuteRead"
	DistributedSqlite_Join_FullMethodName         = "/proto.DistributedSqlite/Join"
)

// DistributedSqliteClient is the client API for DistributedSqlite service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for interacting with the distributed SQLite database
type DistributedSqliteClient interface {
	// Executes a write operation (INSERT, UPDATE, DELETE, CREATE, etc.)
	ExecuteWrite(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error)
	// Executes a read operation (SELECT) - routed to leader for consistency
	ExecuteRead(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error)
	// Request to join the cluster (sent to an existing member)
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
}

type distributedSqliteClient struct {
	cc grpc.ClientConnInterface
}

func NewDistributedSqliteClient(cc grpc.ClientConnInterface) DistributedSqliteClient {
	return &distributedSqliteClient{cc}
}

func (c *distributedSqliteClient) ExecuteWrite(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteResponse)
	err := c.cc.Invoke(ctx, DistributedSqlite_ExecuteWrite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributedSqliteClient) ExecuteRead(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadResponse)
	err := c.cc.Invoke(ctx, DistributedSqlite_ExecuteRead_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributedSqliteClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, DistributedSqlite_Join_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistributedSqliteServer is the server API for DistributedSqlite service.
// All implementations must embed UnimplementedDistributedSqliteServer
// for forward compatibility.
//
// Service for interacting with the distributed SQLite database
type DistributedSqliteServer interface {
	// Executes a write operation (INSERT, UPDATE, DELETE, CREATE, etc.)
	ExecuteWrite(context.Context, *WriteRequest) (*WriteResponse, error)
	// Executes a read operation (SELECT) - routed to leader for consistency
	ExecuteRead(context.Context, *ReadRequest) (*ReadResponse, error)
	// Request to join the cluster (sent to an existing member)
	Join(context.Context, *JoinRequest) (*JoinResponse, error)
	mustEmbedUnimplementedDistributedSqliteServer()
}

// UnimplementedDistributedSqliteServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDistributedSqliteServer struct{}

func (UnimplementedDistributedSqliteServer) ExecuteWrite(context.Context, *WriteRequest) (*WriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteWrite not implemented")
}
func (UnimplementedDistributedSqliteServer) ExecuteRead(context.Context, *ReadRequest) (*ReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteRead not implemented")
}
func (UnimplementedDistributedSqliteServer) Join(context.Context, *JoinRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedDistributedSqliteServer) mustEmbedUnimplementedDistributedSqliteServer() {}
func (UnimplementedDistributedSqliteServer) testEmbeddedByValue()                           {}

// UnsafeDistributedSqliteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DistributedSqliteServer will
// result in compilation errors.
type UnsafeDistributedSqliteServer interface {
	mustEmbedUnimplementedDistributedSqliteServer()
}

func RegisterDistributedSqliteServer(s grpc.ServiceRegistrar, srv DistributedSqliteServer) {
	// If the following call pancis, it indicates UnimplementedDistributedSqliteServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DistributedSqlite_ServiceDesc, srv)
}

func _DistributedSqlite_ExecuteWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedSqliteServer).ExecuteWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistributedSqlite_ExecuteWrite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedSqliteServer).ExecuteWrite(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributedSqlite_ExecuteRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedSqliteServer).ExecuteRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistributedSqlite_ExecuteRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedSqliteServer).ExecuteRead(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributedSqlite_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedSqliteServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistributedSqlite_Join_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedSqliteServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DistributedSqlite_ServiceDesc is the grpc.ServiceDesc for DistributedSqlite service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DistributedSqlite_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DistributedSqlite",
	HandlerType: (*DistributedSqliteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteWrite",
			Handler:    _DistributedSqlite_ExecuteWrite_Handler,
		},
		{
			MethodName: "ExecuteRead",
			Handler:    _DistributedSqlite_ExecuteRead_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _DistributedSqlite_Join_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sqlite.proto",
}
